@{
    ViewData["Title"] = "Home Page";
    Layout = null;

}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CyberHub - Community</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <title>@ViewData["Title"] - CyberHub</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

</head>
<body>
    <div class="container">
        <!-- Left Sidebar -->
        <aside class="sidebar">
            <div class="logo">
                @* <i class="fas fa-shield-alt"></i> *@
                <img src="~/images/logo-CH.png" alt="CyberHub Logo" class="illustration-logo" />
                <span>CyberHub</span>
            </div>
            <nav>
                <ul class="nav-menu">
                    <li class="nav-item">
                        <a href="#" class="nav-link active">
                            <i class="fas fa-home"></i>
                            <span>Home</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <i class="fas fa-chart-line"></i>
                            <span>Analytics</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <i class="fas fa-eye"></i>
                            <span>Watchlist</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <i class="fas fa-search"></i>
                            <span>Threats</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <i class="fas fa-users"></i>
                            <span>Community</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <i class="fas fa-book"></i>
                            <span>Research</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <i class="fas fa-cog"></i>
                            <span>Tools</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>

       
        @model CyberHub.ViewModels.FeedViewModel
@{
    ViewData["Title"] = "CyberHub - Main Feed";
}

<!-- Main Feed -->
<main class="main-feed">
    <div class="user-header">
        <div class="user-avatar">@(Model.CurrentUser.UserName?.Substring(0, 2).ToUpper())</div>
        <div class="user-info">
            <h3>@(Model.CurrentUser.UserName ?? "User")</h3>
            <p>@(Model.CurrentUser.Email)</p>
        </div>
    </div>

            <div class="post-composer">
                @using (Html.BeginForm("CreatePost", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.ValidationSummary(true, "", new { @class = "validation-summary" })
                    @Html.AntiForgeryToken()

                    @* @Html.TextAreaFor(m => m.NewPost.Content, new
                        {
                            @class = "composer-input",
                            placeholder = "What's the latest threat intel? Share your insights...",
                            required = "required"
                        }) *@

                    <textarea name="Content" class="composer-input" placeholder="What's the latest threat intel? Share your insights..." required="required"></textarea>


                    @* @Html.TextBoxFor(m => m.NewPost.Tags, new
                        {
                            @class = "tags-input",
                            placeholder = "Tags (e.g., #cybersecurity #malware #threatintel)",
                            id = "tagsInput"
                        }) *@

                    <input type="text" name="Tags" class="tags-input" placeholder="Tags (e.g., #cybersecurity #malware #threatintel)" id="tagsInput" />

                    <div class="tags-error" id="tagsError" style="display: none;">
                        Each tag must start with # and be separated by spaces
                    </div>

                    <div id="imagePreviewContainer" style="display:none; position: relative; margin-top: 10px;">
                      <img id="imagePreview" src="#" alt="Image Preview" style="max-width: 200px; max-height: 200px; border-radius: 6px;" />
                      <button type="button" id="removeImageBtn" style="position: absolute; top: 0; right: 0; background: #ff4757; color: white; border: none; border-radius: 50%; width: 24px; height: 24px; cursor: pointer;">×</button>
                    </div>


                    <div class="composer-actions">
                        <div class="composer-tools">
                            <label class="tool-btn" title="Add Image">
                                <i class="fas fa-image"></i>

                                <input type="file" name="Image" accept="image/*" class="image-input" style="display: none;" />
                            </label>

                         <select name="CategoryId" class="category-dropdown" required="required">
                            <option value="">Select a category...</option>
                            <option value="1">Malware</option>
                            <option value="2">Vulnerabilities</option>
                            <option value="3">Best Practices</option>
                            <option value="4">Network Security</option>
                            <option value="5">Application Security</option>
                            <option value="6">Cloud Security</option>
                            <option value="7">Mobile Security</option>
                            <option value="8">CTFs & Challenges</option>
                            <option value="9">Learning Resources</option>
                            <option value="10">Ethical Hacking</option>
                            <option value="11">Careers & Certifications</option>
                        </select>

                        </div>

                        <button type="submit" class="post-btn">Post</button>
                    </div>
                }
            </div>

    <!-- Feed Tabs -->
    @* <div class="feed-tabs">
        <a href="#" class="tab active">For You</a>
        <a href="#" class="tab">Following</a>
        <a href="#" class="tab">Trending</a>
    </div> *@

    <!-- Posts -->
    @foreach (var post in Model.Posts)
    {
        <article class="post">
            <div class="post-header">
                <div class="post-avatar">@(post.UserDisplayName.Substring(0, 2).ToUpper())</div>
                <div class="post-user-info">
                    <h4>@post.UserDisplayName</h4>
                    <div class="post-meta">@post.UserDisplayName.ToLower() • @((DateTime.UtcNow - post.CreatedAt).TotalMinutes < 60 
                        ? $"{(int)(DateTime.UtcNow - post.CreatedAt).TotalMinutes} minutes ago" 
                        : (DateTime.UtcNow - post.CreatedAt).TotalHours < 24 
                            ? $"{(int)(DateTime.UtcNow - post.CreatedAt).TotalHours} hours ago" 
                            : post.CreatedAt.ToString("MMM dd"))
                    </div>
                </div>
            </div>

            @* nv *@

            <div class="post-category">
                 @post.CategoryName
            </div>

            
            <div class="post-content">
                <p>@Html.Raw(post.Content.Replace("\n", "<br/>"))</p>
            </div>

            @if (!string.IsNullOrEmpty(post.ImageUrl))
            {
                <div class="post-image" style="margin: 15px 0;">
                    <img src="@Url.Content(post.ImageUrl)" alt="Post image" style="max-width: 100%; border-radius: 12px;" />
                </div>
            }

            
            @if (post.Tags != null && post.Tags.Any())
            {
                <div class="post-tags">
                    @foreach (var tag in post.Tags)
                    {
                        <a href="#" class="post-tag">#@tag</a>
                    }
                </div>
            }
            <div class="post-stats">
                @* <button class="stat-btn like-btn" data-post-id="@post.Id"> *@
                <button class="stat-btn like-btn @(post.IsLikedByCurrentUser ? "liked" : "")" data-post-id="@post.Id">
                    <i class="fas fa-thumbs-up"></i>
                    <span class="like-count">@post.LikesCount</span>
                </button>


                <button class="stat-btn">
                    <i class="fas fa-comment"></i>
                    <span>@post.CommentsCount</span>
                </button>
                <button class="stat-btn">
                    <i class="fas fa-share"></i>
                    <span>0</span>
                </button>
                <button class="stat-btn">
                    <i class="fas fa-bookmark"></i>
                </button>
            </div>
        </article>
    }

    @if (!Model.Posts.Any())
    {
        <div style="text-align: center; padding: 50px; color: #666;">
            <i class="fas fa-comments" style="font-size: 48px; margin-bottom: 20px;"></i>
            <h3>No posts yet</h3>
            <p>Be the first to share some cybersecurity insights!</p>
        </div>
    }


</main>



<!-- Right Sidebar -->
        <aside class="right-sidebar">
            <!-- Trending Threats -->
            <div class="widget">
                <div class="widget-header">
                    <i class="fas fa-fire"></i>
                    <span>Trending Threats</span>
                </div>
                <div class="trending-item">
                    <div class="trending-rank">1</div>
                    <div class="trending-info">
                        <div class="trending-title">Log4Shell Variants</div>
                        <div class="trending-meta">2.3K discussions</div>
                    </div>
                    <span class="threat-level threat-high">HIGH</span>
                </div>
                <div class="trending-item">
                    <div class="trending-rank">2</div>
                    <div class="trending-info">
                        <div class="trending-title">APT29 Campaign</div>
                        <div class="trending-meta">1.8K discussions</div>
                    </div>
                    <span class="threat-level threat-medium">MED</span>
                </div>
                <div class="trending-item">
                    <div class="trending-rank">3</div>
                    <div class="trending-info">
                        <div class="trending-title">Cloud Misconfigurations</div>
                        <div class="trending-meta">1.2K discussions</div>
                    </div>
                    <span class="threat-level threat-medium">MED</span>
                </div>
                <div class="trending-item">
                    <div class="trending-rank">4</div>
                    <div class="trending-info">
                        <div class="trending-title">Supply Chain Attacks</div>
                        <div class="trending-meta">956 discussions</div>
                    </div>
                    <span class="threat-level threat-low">LOW</span>
                </div>
            </div>

            <!-- Trending Topics -->
            <div class="widget">
                <div class="widget-header">
                    <i class="fas fa-hashtag"></i>
                    <span>Trending Topics</span>
                </div>
                <div class="trending-item">
                    <div class="trending-rank">1</div>
                    <div class="trending-info">
                        <div class="trending-title">#ZeroTrust</div>
                        <div class="trending-meta">12.5K posts</div>
                    </div>
                </div>
                <div class="trending-item">
                    <div class="trending-rank">2</div>
                    <div class="trending-info">
                        <div class="trending-title">#ThreatHunting</div>
                        <div class="trending-meta">8.9K posts</div>
                    </div>
                </div>
                <div class="trending-item">
                    <div class="trending-rank">3</div>
                    <div class="trending-info">
                        <div class="trending-title">#IncidentResponse</div>
                        <div class="trending-meta">7.2K posts</div>
                    </div>
                </div>
                <div class="trending-item">
                    <div class="trending-rank">4</div>
                    <div class="trending-info">
                        <div class="trending-title">#RedTeam</div>
                        <div class="trending-meta">5.8K posts</div>
                    </div>
                </div>
                <div class="trending-item">
                    <div class="trending-rank">5</div>
                    <div class="trending-info">
                        <div class="trending-title">#OSINT</div>
                        <div class="trending-meta">4.1K posts</div>
                    </div>
                </div>
            </div>
        </aside>
    </div>

    <script>
document.addEventListener('DOMContentLoaded', function() {
    const tagsInput = document.getElementById('tagsInput');
    const tagsError = document.getElementById('tagsError');
    const form = tagsInput.closest('form');
    
    function validateTags(value) {
        if (!value.trim()) return true; // Empty is valid
        
        const tags = value.trim().split(/\s+/);
        return tags.every(tag => tag.startsWith('#') && tag.length > 1);
    }
    
    function showError(show) {
        tagsError.style.display = show ? 'block' : 'none';
        tagsInput.style.borderColor = show ? '#ff4757' : '#555555';
    }
    
    // Real-time validation on input
    tagsInput.addEventListener('input', function() {
        const isValid = validateTags(this.value);
        showError(!isValid);
    });
    
    // Validation on blur
    tagsInput.addEventListener('blur', function() {
        const isValid = validateTags(this.value);
        showError(!isValid);
    });
    
    // Prevent form submission if tags are invalid
    form.addEventListener('submit', function(e) {
        const isValid = validateTags(tagsInput.value);
        if (!isValid) {
            e.preventDefault();
            showError(true);
            tagsInput.focus();
        }
    });
});
document.addEventListener('DOMContentLoaded', function() {
    const imageInput = document.querySelector('input[name="Image"]');
    const imagePreviewContainer = document.getElementById('imagePreviewContainer');
    const imagePreview = document.getElementById('imagePreview');
    const removeImageBtn = document.getElementById('removeImageBtn');

    imageInput.addEventListener('change', function() {
        const file = this.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreviewContainer.style.display = 'block';
            }
            reader.readAsDataURL(file);
        } else {
            imagePreviewContainer.style.display = 'none';
            imagePreview.src = '#';
        }
    });

    removeImageBtn.addEventListener('click', function() {
        imageInput.value = ''; // Clear the input
        imagePreview.src = '#';
        imagePreviewContainer.style.display = 'none';
    });
});


document.querySelectorAll('.like-btn').forEach(btn => {
    btn.addEventListener('click', async function () {
        const postId = this.dataset.postId;
        const likeCountSpan = this.querySelector('.like-count');
        
        // Disable button temporarily to prevent double-clicks
        this.disabled = true;

        try {
            const formData = new URLSearchParams();
            formData.append('postId', postId);

            const response = await fetch('/Home/ToggleLike', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: formData.toString()
            });

            if (response.ok) {
                const data = await response.json();
                
                likeCountSpan.textContent = data.likeCount;
                
                if (data.isLiked) {
                    this.classList.add('liked');
                } else {
                    this.classList.remove('liked');
                }
                
                this.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    this.style.transform = 'scale(1)';
                }, 150);
                
            } else if (response.status === 401) {
                alert('You need to be logged in to like posts.');
            } else {
                console.error('Error toggling like:', response.statusText);
                alert('Something went wrong. Please try again.');
            }
        } catch (error) {
            console.error('Network error:', error);
            alert('Network error. Please check your connection.');
        } finally {
            this.disabled = false;
        }
    });
});
</script>

</body>
</html>